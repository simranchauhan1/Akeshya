---
const stats = [
    { title: 'Organic Reach (Global)', count: '3835039' },
    { title: 'Campaigns', count: '85' },
    { title: 'Watch Hours (Asia)', count: '14081' },
    { title: 'Excellent CTR % (Asia)', count: '17' }
];
---

<section class="statistics-section">
    <div class="container">
        <div class="image-container">
            <img src="./public/images/counts-img.svg" alt="Statistics Image" />
        </div>
        <div class="stats-container">
            {stats.map((stat, index) => (
                <div class="stat-box" key={index}>
                    <h3 class="count" data-count={stat.count}>{stat.count}</h3>
                    <p class="title">{stat.title}</p>
                </div>
            ))}
        </div>
    </div>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap');

        .statistics-section {
            background-color: #f9f9f9;
            text-align: center;
            padding: 20px; /* Add padding for better spacing */
        }

        .container {
            display: flex;
            flex-direction: column;
            max-width: 1200px;
            margin: 0 auto;
            align-items: flex-start;
            box-sizing: border-box;
        }

        .image-container, .stats-container {
            width: 100%;
            padding: 10px;
            box-sizing: border-box;
        }

        .image-container {
            text-align: center;
        }

        .image-container img {
            max-width: 90%;
            height: auto;
            border-radius: 10px;
        }

        .stats-container {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            gap: 20px;
        }

        .stat-box {
            width: 100%;
            text-align: left;
            padding: 20px;
            transition: transform 0.3s ease;
        }

        .stat-box h3 {
            font-size: 2rem;
            color: #0e0d0d;
            margin: 0;
            font-family: 'Raleway', sans-serif;
            position: relative;
        }

        .stat-box p.title {
            font-size: 1rem;
            color: #666;
            margin: 10px 0 0;
            font-family: 'Open Sans', sans-serif;
        }

        /* Animation keyframes */
        @keyframes countUp {
            0% {
                content: attr(data-count-start);
            }
            100% {
                content: attr(data-count);
            }
        }

        .count {
            display: inline-block;
            animation: countUp 2s ease-out forwards;
        }

        @media (min-width: 768px) {
            .container {
                flex-direction: row;
                align-items: center;
                justify-content: center;
            }

            .stats-container {
                flex-direction: row;
                flex-wrap: wrap;
                justify-content: space-around;
                align-items: flex-start;
                gap: 20px;
            }

            .stat-box {
                flex: 1 1 calc(25% - 20px);
                min-width: 200px;
                text-align: center;
            }
        }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const countElements = document.querySelectorAll('.count');
            countElements.forEach(el => {
                const countTo = el.getAttribute('data-count');
                animateCount(el, countTo);
            });
        });

        function animateCount(element, to) {
            let start = 0;
            const end = parseInt(to, 10);
            const duration = 2000;
            const range = end - start;
            const stepTime = Math.abs(Math.floor(duration / range));
            const startTime = new Date().getTime();
            const endTime = startTime + duration;
            let timer;

            function run() {
                const now = new Date().getTime();
                const remaining = Math.max((endTime - now) / duration, 0);
                const value = Math.round(end - (remaining * range));
                element.innerHTML = value.toLocaleString();
                if (value === end) {
                    clearInterval(timer);
                }
            }

            timer = setInterval(run, stepTime);
            run();
        }
    </script>
</section>
